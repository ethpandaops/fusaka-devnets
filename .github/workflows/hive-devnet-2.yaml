name: Hive - Devnet 2
on:
  schedule:
    - cron: '45 9 * * *'  # Daily at 09:45 UTC
    - cron: '0 */4 * * *'  # 4-hourly at 00:00, 04:00, 08:00, 12:00, 16:00, 20:00 UTC
  workflow_dispatch:
    # Note: We're limited to 10 inputs
    inputs:
      client:
        type: string
        default: '"go-ethereum","reth","nethermind","nimbus-el","besu","erigon"'
        description: Comma-separated list of clients to test .e.g go-ethereum, besu, reth, nethermind, erigon, nimbus-el
      simulator:
        type: string
        default: >-
          "ethereum/eest/consume-engine",
          "ethereum/eest/consume-enginex",
          "ethereum/eest/consume-rlp"
        description: >-
          Comma-separated list of simulators to test
          .e.g ethereum/rpc-compat, ethereum/eest/consume-engine, ethereum/eest/consume-rlp, ethereum/eest/execute-blobs
      hive_version:
        type: string
        default: ethereum/hive@master
        description: GitHub repository and tag for hive (repo@tag)
      client_source:
        type: choice
        description: >-
          How client images should be sourced.
          'git' will use the github repo and tag (See client_repos).
          'docker' will use the docker registry and tag (See client_images).
        options:
          - docker
          - git
      common_client_tag:
        type: string
        description: >-
          If provided, this tag will be used for all clients, overriding individual tags/branches in client_repos and client_images
        default: 'fusaka-devnet-2'
      client_repos:
        type: string
        default: |
          {
            "geth": "ethereum/go-ethereum@master",
            "besu": "hyperledger/besu@main",
            "reth": "paradigmxyz/reth@main",
            "nethermind": "NethermindEth/nethermind@master",
            "erigon": "erigontech/erigon@main",
            "nimbusel": "status-im/nimbus-eth1@master"
          }
        description: 'JSON object containing client versions in format {"client": "repo@tag", ...}'
      client_images:
          type: string
          default: |
            {
              "geth": "docker.ethquokkaops.io/dh/ethpandaops/geth:master",
              "besu": "docker.ethquokkaops.io/dh/ethpandaops/besu:main",
              "reth": "docker.ethquokkaops.io/dh/ethpandaops/reth:main",
              "nethermind": "docker.ethquokkaops.io/dh/ethpandaops/nethermind:master",
              "erigon": "docker.ethquokkaops.io/dh/ethpandaops/erigon:main",
              "nimbusel": "docker.ethquokkaops.io/dh/ethpandaops/nimbus-eth1:master"
            }
          description: 'JSON object containing client docker images in format {"client": "registry:tag", ...}'
      force_run:
          type: boolean
          description: 'Force run even if no changes detected'
          default: false

env:
  # Simulator schedules
  DAILY_SIMULATORS: '["ethereum/eest/consume-rlp","ethereum/eest/consume-engine"]'
  FOUR_HOURLY_SIMULATORS: '["ethereum/eest/consume-enginex"]'
  # Default clients to test
  DEFAULT_CLIENTS: '["go-ethereum","reth","nethermind","nimbus-el","besu","erigon"]'
  # Proxy
  GOPROXY: "${{ vars.GOPROXY }}"
  # Hive action environment variables
  S3_BUCKET: hive-results
  S3_PATH: fusaka-devnet-2
  S3_PUBLIC_URL: https://hive.ethpandaops.io/fusaka-devnet-2
  INSTALL_RCLONE_VERSION: v1.68.2
  EEST_BUILD_ARG_FIXTURES: https://github.com/ethereum/execution-spec-tests/releases/download/fusaka-devnet-2%40v1.2.0/fixtures_fusaka-devnet-2.tar.gz
  EEST_BUILD_ARG_BRANCH: fusaka-devnet-2
  # Flags used for all simulators
  GLOBAL_EXTRA_FLAGS: >-
    --client.checktimelimit=180s
    --sim.parallelism=4
    --docker.auth
    --docker.buildoutput
  # Flags used for the ethereum/eest/consume-engine simulator
  EEST_ENGINE_FLAGS: >-
    --sim.buildarg fixtures=${EEST_BUILD_ARG_FIXTURES}
    --sim.buildarg branch=${EEST_BUILD_ARG_BRANCH}
    --sim.loglevel=3
  # Flags used for the ethereum/eest/consume-enginex simulator
  EEST_ENGINEX_FLAGS: >-
    --sim.buildarg fixtures=${EEST_BUILD_ARG_FIXTURES}
    --sim.buildarg branch=${EEST_BUILD_ARG_BRANCH}
    --sim.loglevel=3
  # Flags used for the ethereum/eest/consume-rlp simulator
  EEST_RLP_FLAGS: >-
    --sim.buildarg fixtures=${EEST_BUILD_ARG_FIXTURES}
    --sim.buildarg branch=${EEST_BUILD_ARG_BRANCH}
    --sim.loglevel=3
  # Flags used for the ethereum/eest/execute simulator
  EEST_EXECUTE_FLAGS: >-
    --sim.buildarg branch=${EEST_BUILD_ARG_BRANCH}
  # Flags used for the ethereum/rpc-compat simulator
  RPC_COMPAT_FLAGS: >-
    --sim.loglevel=3

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      clients_to_test: ${{ steps.determine_scope.outputs.clients }}
      simulators_to_test: ${{ steps.determine_scope.outputs.simulators }}
      hive_repo: >-
        ${{
          steps.client_config_schedule.outputs.hive_repo ||
          steps.client_config_dispatch.outputs.hive_repo
        }}
      hive_tag: >-
        ${{
          steps.client_config_schedule.outputs.hive_tag ||
          steps.client_config_dispatch.outputs.hive_tag
        }}
      client_config: >-
        ${{
          steps.client_config_schedule.outputs.client_config ||
          steps.client_config_dispatch.outputs.client_config
        }}
    steps:
      - id: determine_scope
        run: |
          # Determine which clients and simulators to test based on trigger
          if [ "${{ github.event_name }}" = "schedule" ]; then
            # For scheduled runs, use default clients
            echo "clients=${{ env.DEFAULT_CLIENTS }}" >> $GITHUB_OUTPUT
            
            # Determine simulators based on schedule
            if [ "${{ github.event.schedule }}" = "45 9 * * *" ]; then
              echo "simulators=${{ env.DAILY_SIMULATORS }}" >> $GITHUB_OUTPUT
              echo "Daily run: testing all simulators"
            else
              echo "simulators=${{ env.FOUR_HOURLY_SIMULATORS }}" >> $GITHUB_OUTPUT
              echo "4-hourly run: testing limited simulators"
            fi
          else
            # For manual runs, use inputs
            clients_input='${{ inputs.client }}'
            simulators_input='${{ inputs.simulator }}'
            
            # Convert comma-separated strings to JSON arrays
            clients_array='[]'
            if [ -n "$clients_input" ]; then
              # Parse the input string and convert to JSON array
              clients_array=$(echo "$clients_input" | sed 's/[",]//g' | tr ' ' '\n' | grep -v '^$' | jq -R . | jq -s .)
            fi
            if [ "$clients_array" = "[]" ]; then
              clients_array='${{ env.DEFAULT_CLIENTS }}'
            fi
            
            simulators_array='[]'
            if [ -n "$simulators_input" ]; then
              # Parse the multi-line input and convert to JSON array
              simulators_array=$(echo "$simulators_input" | sed 's/[",]//g' | tr '\n' ' ' | tr ',' '\n' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//' | grep -v '^$' | jq -R . | jq -s .)
            fi
            if [ "$simulators_array" = "[]" ]; then
              simulators_array='${{ env.DAILY_SIMULATORS }}'
            fi
            
            echo "clients=$clients_array" >> $GITHUB_OUTPUT
            echo "simulators=$simulators_array" >> $GITHUB_OUTPUT
            echo "Manual run: using provided inputs"
          fi

      - uses: ethpandaops/hive-github-action/helpers/client-config@c533b9b1683272e443db170d0ea4468ec0dfd272
        if: github.event_name == 'schedule'
        name: 'Client config: schedule'
        id: client_config_schedule
        with:
          common_client_tag: 'fusaka-devnet-2'
          client_source: 'docker'
          hive_version: 'ethereum/hive@master'
          goproxy: ${{ env.GOPROXY }}

      - uses: ethpandaops/hive-github-action/helpers/client-config@c533b9b1683272e443db170d0ea4468ec0dfd272
        if: github.event_name == 'workflow_dispatch'
        name: 'Client config: workflow_dispatch'
        id: client_config_dispatch
        with:
          client_repos: ${{ inputs.client_repos }}
          client_images: ${{ inputs.client_images }}
          common_client_tag: ${{ inputs.common_client_tag }}
          client_source: ${{ inputs.client_source }}
          hive_version: ${{ inputs.hive_version }}
          goproxy: ${{ env.GOPROXY }}

  check-changes:
    needs: prepare
    uses: ./.github/workflows/check-client-changes.yaml
    with:
      client_source: ${{ github.event_name == 'schedule' && 'docker' || inputs.client_source }}
      client_versions: ${{ inputs.client_repos }}
      client_images: ${{ inputs.client_images }}
      common_client_tag: ${{ github.event_name == 'schedule' && 'fusaka-devnet-2' || inputs.common_client_tag }}
      force_run: ${{ inputs.force_run }}
      clients_to_test: ${{ needs.prepare.outputs.clients_to_test }}
      simulators_to_test: ${{ needs.prepare.outputs.simulators_to_test }}

  test:
    timeout-minutes: 540 # 9 hours
    needs: [prepare, check-changes]
    if: needs.check-changes.outputs.should_run == 'true'
    runs-on: >-
      ${{
        matrix.simulator == 'ethereum/rpc-compat' && 'ubuntu-latest' ||
        contains(matrix.simulator, 'ethereum/eest/') && 'self-hosted-ghr-size-m-x64' ||
        'ubuntu-latest'
      }}
    concurrency:
      group: >-
        ${{ github.head_ref || github.run_id }}-${{ matrix.client }}-${{ matrix.simulator }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.check-changes.outputs.test_matrix) }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: ethpandaops/hive-github-action/helpers/self-hosted-runner-dependencies@299a5ffad55b067d7dd26ab9fe40ff999cbb5029 # v0.3.0
        if: runner.environment != 'github-hosted'
      - uses: ethpandaops/actions/docker-login@a91b7a8dd6a264f5e845ac2aa52d2d6f24e6d01d
        with:
          username: ethpandaops
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: ethpandaops/hive-github-action@299a5ffad55b067d7dd26ab9fe40ff999cbb5029 # v0.3.0
        with:
          hive_repository: ${{ needs.prepare.outputs.hive_repo }}
          hive_version: ${{ needs.prepare.outputs.hive_tag }}
          client: ${{ matrix.client }}
          simulator: ${{ matrix.simulator }}
          client_config: ${{ needs.prepare.outputs.client_config }}
          extra_flags: >-
            ${{ env.GLOBAL_EXTRA_FLAGS }}
            ${{ matrix.simulator == 'ethereum/rpc-compat' && env.RPC_COMPAT_FLAGS || '' }}
            ${{ matrix.simulator == 'ethereum/eest/consume-engine' && env.EEST_ENGINE_FLAGS || '' }}
            ${{ matrix.simulator == 'ethereum/eest/consume-enginex' && env.EEST_ENGINEX_FLAGS || '' }}
            ${{ matrix.simulator == 'ethereum/eest/consume-rlp' && env.EEST_RLP_FLAGS || '' }}
          s3_upload: true
          s3_bucket: ${{ env.S3_BUCKET }}
          s3_path: ${{ env.S3_PATH }}
          s3_public_url: ${{ env.S3_PUBLIC_URL }}
          rclone_config: ${{ secrets.HIVE_RCLONE_CONFIG }}
          rclone_version: ${{ env.INSTALL_RCLONE_VERSION }}
          workflow_artifact_upload: true
          website_upload: true